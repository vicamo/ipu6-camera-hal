/**
* INTEL CONFIDENTIAL
*
* Copyright (C) 2017 - 2018 Intel Corporation.
* All Rights Reserved.
*
* The source code contained or described herein and all documents
* related to the source code ("Material") are owned by Intel Corporation
* or licensors. Title to the Material remains with Intel
* Corporation or its licensors. The Material contains trade
* secrets and proprietary and confidential information of Intel or its
* licensors. The Material is protected by worldwide copyright
* and trade secret laws and treaty provisions. No part of the Material may
* be used, copied, reproduced, modified, published, uploaded, posted,
* transmitted, distributed, or disclosed in any way without Intel's prior
* express written permission.
*
* No License under any patent, copyright, trade secret or other intellectual
* property right is granted to or conferred upon you by disclosure or
* delivery of the Materials, either expressly, by implication, inducement,
* estoppel or otherwise. Any license under such intellectual property rights
* must be express and approved by Intel in writing.
*/

#ifndef __NCI_DEC400_DEFS_H
#define __NCI_DEC400_DEFS_H

#include "type_support.h"

#define NCI_DEC400_AXI_BURST_BYTES 64
#define IA_CSS_CMPRS_PAGE_SIZE 4096

enum nci_dec400_config_bit_depth {
	NCI_DEC400_BIT_DEPTH_8 = 0,
	NCI_DEC400_BIT_DEPTH_10,
	NCI_DEC400_BIT_DEPTH_12,
	NCI_DEC400_BIT_DEPTH_16
};

enum nci_dec400_config_write_stream_mode {
	NCI_DEC400_WRITE_STREAM_MODE_DEFAULT = 0,
	NCI_DEC400_WRITE_STREAM_MODE_MIPI_STREAM0, /* Modes 1-4 only for DEC_MIPI */
	NCI_DEC400_WRITE_STREAM_MODE_MIPI_STREAM1,
	NCI_DEC400_WRITE_STREAM_MODE_MIPI_STREAM2,
	NCI_DEC400_WRITE_STREAM_MODE_MIPI_STREAM3,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM0_Y, /* Modes for DEC_IPU */
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM0_U,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM0_V,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM1_Y,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM1_U,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM1_V,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM2_Y,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM2_U,
	NCI_DEC400_WRITE_STREAM_MODE_OSF_STREAM2_V,
	NCI_DEC400_WRITE_STREAM_MODE_PSA_STREAM_Y,
	NCI_DEC400_WRITE_STREAM_MODE_PSA_STREAM_U,
	NCI_DEC400_WRITE_STREAM_MODE_PSA_STREAM_V,
	NCI_DEC400_WRITE_STREAM_MODE_TNR_STREAM_Y,
	NCI_DEC400_WRITE_STREAM_MODE_TNR_STREAM_UV,
	NCI_DEC400_WRITE_STREAM_MODE_VPN_STREAM_Y,
	NCI_DEC400_WRITE_STREAM_MODE_VPN_STREAM_UV,
	NCI_DEC400_WRITE_STREAM_MODE_XYZ_STREAM_BY,
	NCI_DEC400_WRITE_STREAM_MODE_XYZ_STREAM_BU,
	NCI_DEC400_WRITE_STREAM_MODE_XYZ_STREAM_BV
};

enum nci_dec400_config_read_stream_mode {
	NCI_DEC400_READ_STREAM_MODE_DEFAULT = 0,
	NCI_DEC400_READ_STREAM_MODE_ISA_STREAM0,
	NCI_DEC400_READ_STREAM_MODE_ISA_STREAM1,
	NCI_DEC400_READ_STREAM_MODE_ISA_STREAM2,
	NCI_DEC400_READ_STREAM_MODE_ISA_STREAM3,
	NCI_DEC400_READ_STREAM_MODE_TNR_STREAM_Y,
	NCI_DEC400_READ_STREAM_MODE_TNR_STREAM_UV,
	NCI_DEC400_READ_STREAM_MODE_GDC_STREAM_Y,
	NCI_DEC400_READ_STREAM_MODE_GDC_STREAM_U,
	NCI_DEC400_READ_STREAM_MODE_GDC_STREAM_V,
	NCI_DEC400_READ_STREAM_MODE_VPU_SRC_Y,
	NCI_DEC400_READ_STREAM_MODE_VPU_SRC_UV,
	NCI_DEC400_READ_STREAM_MODE_VPU_REF_Y,
	NCI_DEC400_READ_STREAM_MODE_VPU_REF_UV,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_AY,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_AU,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_AV,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_BY,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_BU,
	NCI_DEC400_READ_STREAM_MODE_XYZ_STREAM_BV,
};

enum nci_dec400_config_cache_replacement {
	NCI_DEC400_CACHE_REPLACEMENT_LRU = 0,
	NCI_DEC400_CACHE_REPLACEMENT_FIFO
};

enum nci_dec400_config_compression_format {
	NCI_DEC400_COMPRESSION_FORMAT_ARGB8 = 0,
	NCI_DEC400_COMPRESSION_FORMAT_XRGB8,
	NCI_DEC400_COMPRESSION_FORMAT_AYUV,
	NCI_DEC400_COMPRESSION_FORMAT_UYVY,
	NCI_DEC400_COMPRESSION_FORMAT_YUY2,
	NCI_DEC400_COMPRESSION_FORMAT_YUV_ONLY, /*Use for Y plane of YV12, NV12, NV16,for U or V plane of YV12*/
	NCI_DEC400_COMPRESSION_FORMAT_UV_MIX, /* Use for UV plan of NV12*/
	NCI_DEC400_COMPRESSION_FORMAT_ARGB4,
	NCI_DEC400_COMPRESSION_FORMAT_XRGB4,
	NCI_DEC400_COMPRESSION_FORMAT_A1R5G5B5,
	NCI_DEC400_COMPRESSION_FORMAT_X1R5G5B5,
	NCI_DEC400_COMPRESSION_FORMAT_R5G6B5,
	NCI_DEC400_COMPRESSION_FORMAT_Z24S8,
	NCI_DEC400_COMPRESSION_FORMAT_Z24,
	NCI_DEC400_COMPRESSION_FORMAT_Z16,
	NCI_DEC400_COMPRESSION_FORMAT_A2R10G10B10,
	NCI_DEC400_COMPRESSION_FORMAT_BAYER,
	NCI_DEC400_COMPRESSION_FORMAT_SIGNED_BAYER
};

enum nci_dec400_config_compression_align_mode {
	NCI_DEC400_COMPRESSION_ALIGN_MODE_ALIGN1_BYTE = 0,
	NCI_DEC400_COMPRESSION_ALIGN_MODE_ALIGN16_BYTE,
	NCI_DEC400_COMPRESSION_ALIGN_MODE_ALIGN32_BYTE,
	NCI_DEC400_COMPRESSION_ALIGN_MODE_ALIGN64_BYTE
};

enum nci_dec400_config_tile_align_mode {
	NCI_DEC400_TILE_ALIGN_MODE_TILE1_ALIGN = 0,
	NCI_DEC400_TILE_ALIGN_MODE_TILE2_ALIGN,
	NCI_DEC400_TILE_ALIGN_MODE_TILE4_ALIGN,
	NCI_DEC400_TILE_ALIGN_MODE_CBSR_ALIGN
};

enum nci_dec400_config_tile_mode {
	NCI_DEC400_TILE_MODE_TILE8x8_XMAJOR = 0,
	NCI_DEC400_TILE_MODE_TILE8x8_YMAJOR,
	NCI_DEC400_TILE_MODE_TILE16X4,
	NCI_DEC400_TILE_MODE_TILE8X4,
	NCI_DEC400_TILE_MODE_TILE4X8,
	NCI_DEC400_TILE_MODE_TILE4X4,
	NCI_DEC400_TILE_MODE_RASTER16X4,
	NCI_DEC400_TILE_MODE_TILE64X4,
	NCI_DEC400_TILE_MODE_TILE32X4,
	NCI_DEC400_TILE_MODE_RASTER256X1,
	NCI_DEC400_TILE_MODE_RASTER128X1,
	NCI_DEC400_TILE_MODE_RASTER64X4,
	NCI_DEC400_TILE_MODE_RASTER256X2,
	NCI_DEC400_TILE_MODE_RASTER128X2,
	NCI_DEC400_TILE_MODE_RASTER128X4,
	NCI_DEC400_TILE_MODE_RASTER64X1,
	NCI_DEC400_TILE_MODE_TILE16X8,
	NCI_DEC400_TILE_MODE_TILE8X16,
	NCI_DEC400_TILE_MODE_RASTER512X1,
	NCI_DEC400_TILE_MODE_RASTER32X4,
	NCI_DEC400_TILE_MODE_RASTER64X2,
	NCI_DEC400_TILE_MODE_RASTER32X2,
	NCI_DEC400_TILE_MODE_RASTER32X1,
	NCI_DEC400_TILE_MODE_RASTER16X1
};

#define NCI_DEC400_IRQ_SHADOW_REGS_BIT 30
#define NCI_DEC400_IRQ_BUS_ERROR_BIT 31
#define NCI_DEC400_IRQ_ERRORS_MASK ((1 << NCI_DEC400_IRQ_SHADOW_REGS_BIT) & (1 << NCI_DEC400_IRQ_BUS_ERROR_BIT))

#define NCI_DEC400_IRQ_IS_SHADOW_REGS_IRQ(irq_mask) (irq_mask & (1 << NCI_DEC400_IRQ_SHADOW_REGS_BIT))
#define NCI_DEC400_IRQ_IS_BUS_ERROR(irq_mask) (irq_mask & (1 << NCI_DEC400_IRQ_BUS_ERROR_BIT))
#define NCI_DEC400_IRQ_IS_ERROR(irq_mask) (irq_mask & NCI_DEC400_IRQ_ERRORS_MASK)

#endif /* __NCI_DEC400_DEFS_H */
